When you do <FILEHANDLE>, Perl returns the line at the current position and updates the current position so that the next time you do <FILEHANDLE> you get the next line. Imagine an alternate universe in which the Perl open function yielded not a filehandle but instead, a list of lines: @lines = open('filename');  # alternate universe interface  Almost any programmer asked to criticize this interface will complain that this would consume too much memory if the file is very large. One of the principal reasons for filehandles is that files can be so large and need to be represented in programs in some way other than as a possibly enormous list of lines. Another problem with the imaginary iterator-less version is the following common pattern: open(FILEHANDLE, 'filename'); while (<FILEHANDLE>) { last if /Plutonium/; } close FILEHANDLE; # do something with $_;  This code opens a file and reads through it looking for a record that contains the word “Plutonium”. When it finds the record, it exits the loop immediately, closes the file, and then does something with the record it just extracted. On average, it has to search only half of the file, because the plutonium will typically be somewhere near the middle; it might even get lucky and find it right at the beginning. In the worst case, the plutonium is at the end of the file, or is missing entirely, and the program has to read the whole file to discover that. In the imaginary alternate universe with no filehandles, we get the worst case every time: # alternate universe interface @lines = open('filename'); for (@lines) { last if /Plutonium/; } # do something with $_;  
